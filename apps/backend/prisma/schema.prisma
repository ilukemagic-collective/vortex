datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String?   // Nullable for OAuth users
  displayName   String?
  avatar        String?
  bio          String?   @db.Text
  isVerified   Boolean   @default(false)
  provider     AuthProvider @default(EMAIL)
  providerId   String?   // For OAuth provider's user ID
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  sessions     Session[]
  channels     ChannelMember[]
  messages     Message[]
  friends      Friend[]    @relation("UserFriends")
  friendsOf    Friend[]    @relation("FriendsOfUser")

  @@index([email])
  @@index([username])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  device    String?  // Device information
  lastUsed  DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Friend {
  id        String   @id @default(uuid())
  userId    String   // User who initiated the friendship
  friendId  String   // The friend
  status    FriendStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
  DISCORD
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

// Channel related models for reference
model Channel {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  type        ChannelType @default(TEXT)
  isPrivate   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  members     ChannelMember[]
  messages    Message[]

  @@index([name])
}

model ChannelMember {
  id        String   @id @default(uuid())
  userId    String
  channelId String
  role      MemberRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  userId    String
  channelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([channelId])
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
} 